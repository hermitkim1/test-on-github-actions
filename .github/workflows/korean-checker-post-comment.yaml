# This workflow will make a comment on the pull request
# about the part where Korean was found.
name: Post handler of korean checker
on:
  workflow_run:
    workflows: ["Korean checker"]
    types:
      - completed

env:
  ARTIFACT_NAME: pr

jobs:
  make-comment-on-the-pr:
    name: Make a comment on the PR
    
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'failure'
    
    # Permissions for the GITHUB_TOKEN
    # Ref. https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # issues: write 
      pull-requests: write
      actions: read

    steps:    
    - name: Show the github context
      shell: bash
      run: |
        echo "(DEBUG) ParsedBranch: ${GITHUB_REF#refs/heads/}"
        echo "(DEBUG) github: ${{ github }}"
        echo "(DEBUG) toJSON(github):" 
        echo '${{ toJSON(github) }}'
        echo "(DEBUG) github.action: ${{ github.action }}"
        echo "(DEBUG) github.action_path: ${{ github.action_path }}"
        echo "(DEBUG) github.actor: ${{ github.actor }}"
        echo "(DEBUG) github.base_ref: ${{ github.base_ref	}}"
        echo "(DEBUG) github.event: ${{ github.event }}"
        echo "(DEBUG) github.event_name: ${{ github.event_name }}"
        echo "(DEBUG) github.event_path: ${{ github.event_path }}"
        echo "(DEBUG) github.head_ref: ${{ github.head_ref }}"
        echo "(DEBUG) github.job: ${{ github.job }}"
        echo "(DEBUG) github.ref: ${{ github.ref }}"
        echo "(DEBUG) github.repository: ${{ github.repository }}"
        echo "(DEBUG) github.repository_owner: ${{ github.repository_owner }}"
        echo "(DEBUG) github.run_id: ${{ github.run_id }}"
        echo "(DEBUG) github.run_number: ${{ github.run_number }}"
        echo "(DEBUG) github.sha: ${{ github.sha }}"
        echo "(DEBUG) github.token: ${{ github.token }}"
        echo "(DEBUG) github.workflow: ${{ github.workflow }}"
        echo "(DEBUG) github.workspace: ${{ github.workspace }}"
        
#     NOTE - "actions/download-artifact" is not working for sharing data between workflows. 
    - name: Download output
      uses: actions/download-artifact@v4
      with: 
        name: ${{ env.ARTIFACT_NAME }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
    # - name: Download output
    #   uses: dawidd6/action-download-artifact@v3
    #   with:
    #     github_token: ${{secrets.GITHUB_TOKEN}}
    #     workflow: check-outdated-content.yaml
    #     workflow_conclusion: success

    - name: Display structure of downloaded files
      run: ls -R
    
    # - name: Set up environment variables from the output
    #   shell: bash
    #   run: |
    #     echo "(DEBUG) Install 'jq' to read json"
    #     sudo apt-get install -y jq

    #     echo "(DEBUG) Display files and directories"
    #     tree
        
    #     # Set the last changed directory as the output directory
    #     OUTPUT_DIR=$(ls -tp | head -1)
        
    #     # Read L10N_DIR and L10N_CODE from L10N_INFO.json
    #     L10N_DIR=$(jq -r '.L10N_DIR' < ${OUTPUT_DIR}/L10N_INFO.json)
    #     L10N_CODE=$(jq -r '.L10N_CODE' < ${OUTPUT_DIR}/L10N_INFO.json)
        
    #     # Count outdated content
    #     OUTDATED_CONTENT_COUNT=$(ls $OUTPUT_DIR | wc -l)
        
    #     echo "(DEBUG) OUTPUT_DIR: ${OUTPUT_DIR}"
    #     echo "(DEBUG) L10N_DIR: ${L10N_DIR}"
    #     echo "(DEBUG) L10N_CODE: ${L10N_CODE}"
    #     echo "(DEBUG) OUTDATED_CONTENT_COUNT: ${OUTDATED_CONTENT_COUNT}"
        
    #     # Set OUTPUT_DIR, L10N_DIR, L10N_CODE, and OUTDATED_CONTENT_COUNT as environment variables
    #     # Ref: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
    #     echo "OUTPUT_DIR=${OUTPUT_DIR}" >> $GITHUB_ENV
    #     echo "L10N_DIR=${L10N_DIR}" >> $GITHUB_ENV
    #     echo "L10N_CODE=${L10N_CODE}" >> $GITHUB_ENV
    #     echo "OUTDATED_CONTENT_COUNT=${OUTDATED_CONTENT_COUNT}" >> $GITHUB_ENV
        
    # - name: Comment PR with results
    #   uses: actions/github-script@v7
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: |
    #       const fs = require('fs');
    #       const path = require('path');
    #       const resultsPath = path.join(process.env.GITHUB_WORKSPACE, 'korean_check_results.md');            
    #       if (fs.existsSync(resultsPath)) {
    #         const results = fs.readFileSync(resultsPath, 'utf8');
    #         if (results.trim().length > 0) {
    #           github.rest.issues.createComment({
    #             issue_number: context.issue.number,
    #             owner: context.repo.owner,
    #             repo: context.repo.repo,
    #             body: results
    #           });
    #         }
    #       }
